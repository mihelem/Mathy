"""
# ---------------------------- Dual algorithm D3 -----------------------------
                 WIP: really, just copy pasted from old commit!
# Null Space method + Box Constraints dualised
"""
mutable struct QMCFBPAlgorithmD3D <: OptimizationAlgorithm{QMCFBProblem}
end
function set!(algorithm::QMCFBPAlgorithmD3D, ùîì::QMCFBProblem)
end
function run!(algo::QMCFBPAlgorithmD3D, ùîì::QMCFBProblem)
    @unpack Q, q, l, u, E, b = ùîì
    œµ = 1e-8 # todo all

    # Assumption : m ‚â§ n
    function split_eq_constraint(œµ)
        m, n = size(E)
        A = [E b I]
        P‚Çï, P·µ• = [i for i in 1:n], [i for i in 1:m]
        n‚Ä≤ = n
        for i=1:m
            for i‚Ä≤=i:n‚Ä≤
                j = i
                for j‚Ä≤=i:m
                    if abs(A[j‚Ä≤, i‚Ä≤]) > abs(A[j, i‚Ä≤])
                        j = j‚Ä≤
                    end
                end
                if abs(A[j, i‚Ä≤]) > œµ
                    P·µ•[i], P·µ•[j] = P·µ•[j], P·µ•[i]
                    A[i, i‚Ä≤:end], A[j, i‚Ä≤:end] = A[j, i‚Ä≤:end], A[i, i‚Ä≤:end]

                    P‚Çï[i], P‚Çï[i‚Ä≤] = P‚Çï[i‚Ä≤], P‚Çï[i]
                    A[:, i], A[:, i‚Ä≤] = A[:, i‚Ä≤], A[:, i]
                    A[:, i+1:i‚Ä≤], A[:, (n‚Ä≤+i+1-i‚Ä≤):n‚Ä≤] = A[:, (n‚Ä≤+i+1-i‚Ä≤):n‚Ä≤], A[:, i+1:i‚Ä≤]
                    P‚Çï[i+1:i‚Ä≤], P‚Çï[(n‚Ä≤+i+1-i‚Ä≤):n‚Ä≤] = P‚Çï[(n‚Ä≤+i+1-i‚Ä≤):n‚Ä≤], P‚Çï[i+1:i‚Ä≤]

                    n‚Ä≤ = n‚Ä≤+i-i‚Ä≤
                    break
                end
            end
            if abs(A[i, i]) ‚â§ œµ
                break
            end

            A[i+1:end, i:end] -=  (A[i+1:end, i] / A[i, i]) .* A[i, i:end]'
        end

        dimension = m
        for i=m:-1:1
            if abs(A[i, i]) ‚â§ œµ
                dimension -= 1
                continue
            end
            A[i, i:end] ./= A[i, i]
            A[1:i-1, i:end] -= A[1:i-1, i] .* A[i, i:end]'
        end

        return (dimension, P·µ•, P‚Çï, A)
    end

    dimension, P·µ•, P‚Çï, A = split_eq_constraint(œµ)
    m, n = dimension, size(E, 2)-dimension

    @views b_B = b[P·µ•[1:dimension]]
    @views EÃÉ_Bb = A[1:dimension, size(E, 2)+1]
    @views Q_B = Q[P‚Çï[1:dimension], P‚Çï[1:dimension]]
    @views Q_N = Q[P‚Çï[dimension+1:end], P‚Çï[dimension+1:end]]
    @views EÃÉ_BE_N = A[1:dimension, dimension+1:size(E, 2)]
    @views q_B, q_N = q[P‚Çï[1:dimension]], q[P‚Çï[dimension+1:end]]
    ‚àá‚àáL‚ÇÇ = EÃÉ_BE_N'Q_B*EÃÉ_BE_N + Q_N
    ‚àáL‚ÇÅ = q_N - EÃÉ_BE_N' * (q_B + Q_B*EÃÉ_Bb)
    L‚ÇÄ = 0.5 * EÃÉ_Bb'Q_B*EÃÉ_Bb + q_B'EÃÉ_Bb




    function test()
        return split_eq_constraint(œµ)
    end

    return test()
end
