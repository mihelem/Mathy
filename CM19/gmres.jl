using LinearAlgebra

function GMRES_naive(A, b, k, œµ, œµ‚Çê)
    m, n = size(A)

    H = UpperHessenberg(zeros(eltype(A), (k+1, k)))
    h = i -> view(H, 1:i+1, i)
    Q = zeros(eltype(A), (m, k+1))
    q = i -> view(Q, :, i)

    Œì = zeros(eltype(A), (2, k))
    Œ≥ = i -> view(Œì, :, i)
    T = copy(H)
    t = i -> view(T, 1:i, i)

    ùñá = sqrt(b'*b)
    q(1)[:] = b / ùñá

    # intermediate solutions
    y‚ÇÄ = Vector{eltype(A)}(undef, 0)
    y‚ÇÅ = copy(y‚ÇÄ)
    # y‚ÇÇ = copy(y‚ÇÄ)
    # y‚ÇÉ = copy(y‚ÇÄ)

    # error calculation
    y‚ÇÅ‚ÇÅ = copy(y‚ÇÄ)
    HÃÉ·µ¢y = copy(y‚ÇÄ)
    r·µ¢ = copy(y‚ÇÄ)
    ùñó·µ¢::eltype(A) = 0

    y = copy(y‚ÇÄ)

    Œõ = copy(y‚ÇÄ)
    for i=1:k
        # Arnoldi iteration
        q(i+1)[:] = A*q(i)
        for j=1:i
            H[j, i] = q(j)'*q(i+1)
            q(i+1)[:] -= q(j)*H[j, i]
        end
        H[i+1, i] = sqrt(q(i+1)'*q(i+1)) #todo: check œµ‚Çê
        q(i+1)[:] /= H[i+1, i]

        # Hessenberg ‚Üí UpperTriangular via Householder
        T[1:i+1, i] = H[1:i+1, i]
        for j=1:i-1
            T[j:j+1, i] -= 2Œ≥(j) * (Œ≥(j)'*T[j:j+1, i])
        end
        ùñô·µ¢ = sign(T[i, i]) * sqrt(T[i:i+1, i]'*T[i:i+1, i])
        Œ≥(i)[:] = [T[i, i] + ùñô·µ¢, T[i+1, i]]
        Œ≥(i)[:] /= sqrt(Œ≥(i)'*Œ≥(i))
        T[i, i] = -ùñô·µ¢

        Œõ = [Œõ; T[i, i]]
        T[1:i, i] ./= Œõ

        
        # update solution via pseudoinversion
        y‚ÇÄ = [y‚ÇÄ; H[1, i]' * ùñá]
        y‚ÇÅ = [y‚ÇÅ; y‚ÇÄ[i] - T[1:i-1, i]'*y‚ÇÅ]
        
        # calculate error ||Ax·µ¢-b||‚ÇÇ in O(i)
        y‚ÇÅ‚ÇÅ = [y‚ÇÅ‚ÇÅ; y‚ÇÅ[i]/Œõ[i]']
        HÃÉ·µ¢y = [y‚ÇÅ‚ÇÅ; 0]
        for l=i:-1:1
            HÃÉ·µ¢y[l:l+1] -= 2Œ≥(l) * (Œ≥(l)' * HÃÉ·µ¢y[l:l+1])
        end
        r·µ¢ = [HÃÉ·µ¢y[1]-ùñá; HÃÉ·µ¢y[2:end]]
        ùñó·µ¢ = sqrt(r·µ¢'*r·µ¢)
        println(ùñó·µ¢)

        # BEGIN - for Testing Purposes
        # this is Œ£ O(i^2) = O(k^3), in final version calculate y‚ÇÉ outside the 
        # for cycle with a single inversion of triangular, so O(k^2)
        # y‚ÇÇ = y‚ÇÅ ./ (transpose(Œõ') .* Œõ)
        # Œîy‚ÇÉ = zeros(eltype(Œõ), size(y‚ÇÇ))
        # Œîy‚ÇÉ[end] = y‚ÇÇ[end]
        # for j=i:-1:1
        #     Œîy‚ÇÉ[1:j-1] -= T[1:j-1, j] * Œîy‚ÇÉ[j]
        # end
        # y‚ÇÉ = [y‚ÇÉ; 0] + Œîy‚ÇÉ
        # END - for Testing Purposes

        if ùñó·µ¢ < œµ*ùñá
            break
        end
    end

    y = y‚ÇÅ ./ (transpose(Œõ') .* Œõ)
    for i=size(y)[1]-1:-1:1
        y[1:i] -= T[1:i, i+1] * y[i+1]
    end

    return (H, Q, Œì, UpperTriangular(T[1:end-1, :]), Œõ, y)
end